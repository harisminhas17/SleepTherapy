generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model User {
    id                    Int      @id @default(autoincrement())
    email                 String   @unique
    name                  String?  @db.VarChar(255)
    password              String   @db.VarChar(255)
    age                   Int      @db.Int
    api_token             String?  @db.VarChar(255)
    image                 String?  @db.VarChar(255)
    gender                String   @db.VarChar(255)
    identify_as           String?  @db.VarChar(255)
    bed_time              String?  @db.VarChar(255)
    wake_up_time          String?  @db.VarChar(255)
    difficulty_sleeping   String?  @db.VarChar(255)
    wake_up_rested        String?  @db.VarChar(255)
    working_hours         String?  @db.VarChar(255)
    daily_commuting_hours Int?     @db.Int
    travel_frequently     String?  @db.VarChar(255)
    is_bedroom_noisy      String?  @db.VarChar(255)
    is_bedroom_dark       String?  @db.VarChar(255)
    use_electronics       String?  @db.VarChar(255)
    wake_up_feeling       String?  @db.VarChar(255)
    feel_stressed         String?  @db.VarChar(255)
    consumption           String?  @db.VarChar(255)
    exercise_regularly    String?  @db.VarChar(255)
    sleep_disorders       String?  @db.VarChar(255)
    created_at            DateTime @default(now())
    updated_at            DateTime @updatedAt

    sleepingDisorders UserSleepingDisorder[]
    journals          Journal[]
    challenges        UserChallenge[]
    alarms            Alarm[]
}
model SleepingDisorder {
    id    Int                    @id @default(autoincrement())
    name  String                 @unique
    users UserSleepingDisorder[]
}

model UserSleepingDisorder {
    id               Int              @id @default(autoincrement())
    user             User             @relation(fields: [userId], references: [id])
    userId           Int
    sleepingDisorder SleepingDisorder @relation(fields: [disorderId], references: [id])
    disorderId       Int

    @@unique([userId, disorderId])
}

model SleepRecommendation {
    id         Int    @id @default(autoincrement())
    iconSource String
    title      String
}

model SleepingTip {
    id          Int    @id @default(autoincrement())
    iconSource  String
    title       String
    description String @db.Text
}

model MeditationSound {
    id          Int    @id @default(autoincrement())
    title       String
    icon        String
    duration    String
    src         String
    description String @db.Text
}

model Journal {
    id           Int      @id @default(autoincrement())
    user         User     @relation(fields: [userId], references: [id])
    userId       Int
    mood         String
    sleepQuality String
    notes        String   @db.Text
    createdAt    DateTime @default(now())
}

model JournalSummary {
    id          Int    @id @default(autoincrement())
    description String @db.Text
    icon        String
}

model SleepChallenge {
    id              Int             @id @default(autoincrement())
    title           String
    iconSrc         String
    description     String          @db.Text
    benefitsWhy     String          @db.Text
    benefitsResults String          @db.Text
    totalDays       Int
    type            String // 'general' or 'sleep_quality'
    users           UserChallenge[]
}

model UserChallenge {
    id            Int            @id @default(autoincrement())
    user          User           @relation(fields: [userId], references: [id])
    userId        Int
    challenge     SleepChallenge @relation(fields: [challengeId], references: [id])
    challengeId   Int
    completedDays Int            @default(0)
    isStarted     Boolean        @default(false)
    startDate     DateTime?
    lastUpdated   DateTime       @default(now())

    @@unique([userId, challengeId])
}

model Alarm {
    id              Int      @id @default(autoincrement())
    user            User     @relation(fields: [userId], references: [id])
    userId          Int
    time            String
    date            String?
    timezone        String   @default("UTC")
    repeatDays      String?  @db.Text // JSON string of days
    label           String?
    sound           String?
    vibration       Boolean  @default(true)
    volume          Int      @default(70)
    wakeUpChallenge Boolean  @default(false)
    isActive        Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model PersonalAccessToken {
    id            Int       @id @default(autoincrement())
    tokenableType String    @map("tokenable_type")
    tokenableId   Int       @map("tokenable_id")
    name          String
    token         String    @unique @db.VarChar(64)
    abilities     String?   @db.Text
    lastUsedAt    DateTime? @map("last_used_at")
    expiresAt     DateTime? @map("expires_at")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    @@index([tokenableType, tokenableId])
    @@map("personal_access_tokens")
}

