generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model UserSleepData {
    id                  Int      @id @default(autoincrement())
    user_id             Int
    sleep_date          DateTime @db.DateTime
    sleep_start         DateTime @db.DateTime
    sleep_end           DateTime @db.DateTime
    total_sleep_minutes Int      @db.Int
    deep_sleep_minutes  Int      @db.Int
    sleep_quality       Int      @default(0)
    sleep_percentage    Int      @default(0)
    remaining_minutes   Int      @default(0)

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    user User @relation(fields: [user_id], references: [id])
}

model User {
    id                    Int      @id @default(autoincrement())
    email                 String   @unique
    name                  String?  @db.VarChar(255)
    password              String   @db.VarChar(255)
    age                   Int      @db.Int
    api_token             String?  @db.VarChar(255)
    image                 String?  @db.VarChar(255)
    gender                String   @db.VarChar(255)
    identify_as           String?  @db.VarChar(255)
    bed_time              String?  @db.VarChar(255)
    wake_up_time          String?  @db.VarChar(255)
    difficulty_sleeping   String?  @db.VarChar(255)
    wake_up_rested        String?  @db.VarChar(255)
    working_hours         String?  @db.VarChar(255)
    daily_commuting_hours Int?     @db.Int
    travel_frequently     String?  @db.VarChar(255)
    is_bedroom_noisy      String?  @db.VarChar(255)
    is_bedroom_dark       String?  @db.VarChar(255)
    use_electronics       String?  @db.VarChar(255)
    wake_up_feeling       String?  @db.VarChar(255)
    feel_stressed         String?  @db.VarChar(255)
    consumption           String?  @db.VarChar(255)
    exercise_regularly    String?  @db.VarChar(255)
    sleep_disorders       String?  @db.VarChar(255)
    notification_token    String?  @db.VarChar(255)
    package_id            Int?     @db.Int
    package               Package? @relation(fields: [package_id], references: [id])
    created_at            DateTime @default(now())
    updated_at            DateTime @default(now()) @updatedAt

    sleepingDisorders   UserSleepingDisorder[]
    journals            Journal[]
    challenges          UserChallenge[]
    alarms              Alarm[]
    notifications       Notifications[]
    userSleepData       UserSleepData[]
    packageSubScription PackageSubScription[]
    Payment             Payment[]
}

model SleepingDisorder {
    id    Int                    @id @default(autoincrement())
    name  String                 @unique
    users UserSleepingDisorder[]
}

model UserSleepingDisorder {
    id               Int              @id @default(autoincrement())
    user             User             @relation(fields: [userId], references: [id])
    userId           Int
    sleepingDisorder SleepingDisorder @relation(fields: [disorderId], references: [id])
    disorderId       Int

    @@unique([userId, disorderId])
}

model SleepRecommendation {
    id         Int    @id @default(autoincrement())
    iconSource String
    title      String
}

model SleepingTip {
    id          Int    @id @default(autoincrement())
    iconSource  String
    title       String
    description String @db.Text
}

model Meditation {
    id          Int            @id @default(autoincrement())
    title       String         @db.VarChar(255)
    type        MeditationType
    description String?        @db.Text
    image       String?        @db.VarChar(255)
    audio       String?        @db.VarChar(255)
    duration    Int?           @db.Int
    created_at  DateTime       @default(now())
    updated_at  DateTime       @updatedAt
}

enum MeditationType {
    MEDITATION
    SLEEP_STORY
    BREATHING_EXERCISE
    AMBIENT_SOUND
}

model Journal {
    id            Int          @id @default(autoincrement())
    user_id       Int
    mood          Mood
    sleep_quality SleepQuality
    notes         String?      @db.Text
    created_at    DateTime     @default(now())
    updated_at    DateTime     @updatedAt
    deleted_at    DateTime?

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Mood {
    HAPPY
    NEUTRAL
    SAD
    UPSET
    SLEEPY
    ANGRY
}

enum SleepQuality {
    WORST
    POOR
    FAIR
    GOOD
    EXCELLENT
}

model SleepChallenge {
    id              Int             @id @default(autoincrement())
    title           String
    iconSrc         String
    description     String          @db.Text
    benefitsWhy     String          @db.Text
    benefitsResults String          @db.Text
    totalDays       Int
    type            String // 'general' or 'sleep_quality'
    users           UserChallenge[]
}

model UserChallenge {
    id            Int            @id @default(autoincrement())
    user          User           @relation(fields: [userId], references: [id])
    userId        Int
    challenge     SleepChallenge @relation(fields: [challengeId], references: [id])
    challengeId   Int
    completedDays Int            @default(0)
    isStarted     Boolean        @default(false)
    startDate     DateTime?
    lastUpdated   DateTime       @default(now())

    @@unique([userId, challengeId])
}

model Alarm {
    id                Int      @id @default(autoincrement())
    user_id           Int
    time              String
    time_zone         String   @default("UTC")
    repeat_days       String?  @db.Text
    alarm_name        String
    label             String?
    alarm_sound       String?
    math_problem      Int?
    alarm_volume      Int      @default(70)
    vibration         Int      @default(0)
    wake_up_challenge Int      @default(0)
    is_active         Int      @default(1)
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Notifications {
    id         Int      @id @default(autoincrement())
    user_id    Int
    title      String
    message    String
    type       String
    is_read    Int      @default(0)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PersonalAccessToken {
    id            Int       @id @default(autoincrement())
    tokenableType String    @map("tokenable_type")
    tokenableId   Int       @map("tokenable_id")
    name          String
    token         String    @unique @db.VarChar(64)
    abilities     String?   @db.Text
    lastUsedAt    DateTime? @map("last_used_at")
    expiresAt     DateTime? @map("expires_at")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    @@index([tokenableType, tokenableId])
    @@map("personal_access_tokens")
}

model Package {
    id           Int      @id @default(autoincrement())
    name         String
    description  String?
    price        Int
    duration     Int?
    is_active    Int      @default(1)
    key_features String?  @db.Text
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt

    users               User[]
    packageSubScription PackageSubScription[]
    Payment             Payment[]
}

model PackageSubScription {
    id         Int      @id @default(autoincrement())
    user_id    Int
    package_id Int
    start_date DateTime
    end_date   DateTime
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    package Package @relation(fields: [package_id], references: [id], onDelete: Cascade)
}

model Payment {
    id                Int           @id @default(autoincrement())
    payment_method_id Int
    user_id           Int
    package_id        Int?
    amount            Int
    status            PaymentStatus
    payment_token     String?
    created_at        DateTime      @default(now())
    updated_at        DateTime      @updatedAt

    user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
    package       Package?       @relation(fields: [package_id], references: [id], onDelete: Cascade)
    paymentMethod PaymentMethod? @relation(fields: [payment_method_id], references: [id])
}

enum PaymentStatus {
    PENDING
    SUCCESS
    FAILED
}

model PaymentMethod {
    id         Int      @id @default(autoincrement())
    name       String
    is_active  Int      @default(1)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    Payment Payment[]
}
